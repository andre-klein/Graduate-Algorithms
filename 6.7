Let L(i,j) = length of LPS in x[i ... j] for i<j<=n

L(0,0) = 0
L(i,i) = 1 for i<=n
L(i,i+1) = max(equal(x[i], x[i+1]),1) for i<=n-1

L(i,j) = max[L(i,j-1), L(i+1,j), L(i+1, j-1) + equal(x[i],x[j])] for i<j<=n

here equal(a,b)=2 if a=b, otherwise equal(a,b)=0

pseudocode:

L(0,0) = 0

for i = 1 to n:
	L(i,i) = 1

for i = 1 to n-1:
	L(i,i+1) = 1
	if x[i] = x[i+1]:
		L(i,i+1) = 2

for j = 3 to n:
	for k = 2 to j-1:
		i = j-k
		if x[i] = x[j]:
			L(i,j) = max(L(i,j-1), L(i+1,j), L(i+1, j-1) + 2)
		else:
			L(i,j) = max(L(i,j-1), L(i+1,j))

O(n^2)
