Subproblem:
Let L[i] = max neighboring product-sum including a_i s.t. 0 <= i <= n

Base case:
L[0] = 0
L[1] = a_1

Recurrence:
prev = i-1
L[i] = max(L[i-1] + a_i, L[i-2] + a_i * a_prev) s.t. 2 <= i <= n

Pseudocode:
L[0] = 0 # O(1)
for i = 1 to n: # O(n)
  prev = i-1 # O(1)
  L[i] = max(L[i-1] + ai, L[i-2] + a_i * a_prev) # O(1)
return L[n] # O(1)

Time Complexity:
O(1) + O(n)*(O(1) + O(1)) = O(n)

Space Complexity:
O(n)
Can be done with O(1) space because we only care about L[i-1] and L[i-2]
