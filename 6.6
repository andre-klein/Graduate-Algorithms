Subproblem:
C[i, j] = set of all possible multiplication outcomes starting at i and ending at j s.t. 1 <= i < j <= n

Base case:
C[i, i] = a_i for 1 <= i <= n

Recurrence:
C[i, j] = Union_l{xy: x in C[i,l] and y in C[l+1, j]} s.t. i <= l <= j-1 and 1 <= i < j <= n

Pseudocode:
for i = 1 to n: # O(n)
  C[i, i] = a_i

for s = 1 to n: # O(n)
  for i = 1 to s-n: # O(n)
    Let j = i + s
    for l = i to j-1: # O(n)
      C[i, j] = C[i,j] Union (outer(C[i, l], C[l+1, j])) # outer refers to outer product

return (intersect(C[1,n], a) = a)

Time complexity:
O(n^3)
