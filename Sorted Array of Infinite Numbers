STEP 1: Let start = 1 and end = 2 indicating current search positions
This step can be performed in O(1) time

STEP 2: If A[end] < x, multiply start and end by 2 then repeat STEP 2 (until the inequality is no longer satisfied).
For example, if start is 1 and end is 2 then the new values are 2 and 4, respectively.
This step can be performed in O(log(n)) time

STEP 3: If A[start] > x or A[end] < x, return 'NO'
This step can be performed in O(1) time

STEP 4: m = ⌊(start + end)/2)⌋
Where Lx⌋ is the mathematical symbol indicating floor of x and ⌈x⌉ indicates ceiling of x.
This step can be performed in O(1) time

STEP 5: If x > A[m] then start = m + 1 and we return to STEP 3
This step can be performed in O(1) time

STEP 6: Else If x < A[m] then end = m - 1 and we return to STEP 3
This step can be performed in O(1) time

STEP 7: Else -> we know x = A[m] and we return index m
This step can be performed in O(1) time

Correctness:


Running Time:

