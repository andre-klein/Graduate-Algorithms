Subproblem:
Let L[i, j] = length of LPS in x[i...j] for i < j <= n

Base Case:
L[i, i] = 1 for 1 <= i <= n
L[i, i+1] = max(equal(x_i, x_i+1), 1) for 1 <= i <= n-1 
where equal(a, b) = 2 if a = b, otherwise 0

Recurrence:
L[i, j] = max(L[i, j-1], L[i+1, j], L[i+1, j-1] + equal(x_i, x_j)) s.t. 1 <= i < j-1 <= n-1

Pseudocode:
for i = 1 to n:
	L[i, i] = 1

for i = 1 to n - 1:
	L[i, i + 1] = 1
	if x_i = x_i+1:
		L[i, i+1] = 2

for j = 3 to n:
	for i = j-2 to 1:
		if x[i] = x[j]:
			L(i,j) = max(L(i,j-1), L(i+1,j), L(i+1, j-1) + 2)
		else:
			L(i,j) = max(L(i,j-1), L(i+1,j))
		
Time complexity:
O(n^2)
