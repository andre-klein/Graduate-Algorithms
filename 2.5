Master's theorem:
if d > logb(a) => O(n^d)
if d = logb(a) => O(n^d * logn)
if d < logb(a) => O(n ^ [logb(a)])

a) T[n] = 2T[n/3] + 1
a = 2
b = 3
d = 0
= O(n ^ log3(2))

b) T[n] = 5T[n/4] + n
= O(n ^ log4(5))

c) T[n] = 7T[n/7] + n
= O(nlogn)

d) T[n] = 9T[n/3] + n^2
= O(n^2 * logn)

e) T[n] = 8T[n/2] + n^3
= O(n^3 * logn)

f) T[n] = 49T[n/25] + n^[3/2]logn = 49[49T[n/(25^2)] + ((n/25)^[3/2])*log(n/25)] + n^[3/2]logn
We stop when n/(25^i) = 1 which is our base case
This would result in i = log25(n)
Note that T(i) is actually 0 because the log(n/n) = 0 at our last level

Now, T[n] = n^[3/2]logn + 49*(n/25)^[3/2]log(n/25) + ... + 49^(i-1)*(n/(25^i-1))^[3/2]log(n/(25^(i-1))) + 0

right term: 49^(log25(n)-1)*(n/(25^(log25(n))-1))^[3/2]log(n/(25^(log25(n)-1)))
= 49^(log25(n)-1)*(125)log(25) = 49^(log25(n))*(125/49)log(25) = n^(log25(49))*(125/49)log(25) << 15(n^1.5)
left term: n^[3/2]logn

Left term dominates -> T[n] = n^[3/2]logn

Another thing we can say is the following: 
At level i, we have 49^i * [n/(25^i)]^3/2 * log(n/[25^i])
This is 0 if i = log25(n) and if i = 0 gives our answer
Note that the hint is still correct because it uses the big O notation.
If we want to be precise we have to have log(n/(25^i))

g) T[n] = T[n-1] + 2 = 2*(n-1) + 1 = 2n - 1 = O(n)

h) T[n] = T[n-1] + n^c = O(n^(c+1))

i) T[n] = T[n-1] + c^n = O(n*[c^n])

j) T[n] = 2T(n-1) + 1 = 2^0 + 2^1 + 2^2 + ... + 2^(n-2) + T[1]

k)
