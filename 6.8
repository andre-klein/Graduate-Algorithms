Subproblem:
Let L[i,j] = length of longest common substring in x1...xi and y1...yj for 1 <= i <= n and 1 <= j <= m

Base Case:
L[0, j] = L[i, 0] = 0 for 1<= i <= n and 1 <= j <= m

Recurrence:
L(i,j) = L(i-1,j-1) + 1 if xi = xj.
L(i,j) = 0 otherwise.
where 1 <= i <= n and 1< = j <= m

Pseudocode:
for i = 0 to n:
	L(i,0) = 0

for j = 0 to m:
	L(0,j) = 0

for i = 1 to n: # O(n)
	for j = 1 to m: # O(m)
		if xi = yj:
			L(i,j) = L(i-1,j-1) + 1
		else:
			L(i,j) = 0

return max(L(.,.))

Time complexity:
O(n*m)
